openapi: 3.0.3
info:
  title: UK Internal Market EORI Authorisaton Checker Reference Guide
  description: |
    This API allows Fast Parcel Operators (FPOs), software developers and 3rd party software users to check if the holders of provided EORI Numbers have a valid UKIMS authorisation.
    The aim is to avoid possible rejections of goods moving through from GB-NI, which could physically stop the B2B parcels.
    The API is based on REST principles with a single POST method endpoint that returns data in JSON format. It uses standard HTTP error response codes. 
    Use the API to request the UKIMS Authorization Status of between 1 to 3000 EORIs passed as an array. 

    Note: The API endpoint relates only to Great Britain and Northern Ireland.
  contact: {}
  version: 0.0.1
servers:
  - url: 'https://test-api.service.hmrc.gov.uk'
    description: |
      URL for the Test Environment
  - url: 'https://api.service.hmrc.gov.uk'
    description: |
      URL for the Live Environment
tags:
  - name: Authorisations
    description: |
paths:
  /customs/uk-internal-market/authorisations:
    post:
      tags:
        - Endpoint for Authorisations
      summary: |
        Request Authorisation Status for user provided EORIs
      description: |
        Use this method to request the UKIMS Authorization Status of between 1 and 3000 EORIs. 
              

        
      operationId: requestAuth
      requestBody:
        description: | 
          The payload of the API request. 
          
          Request Example:
          
          curl -X POST "https://test-api.service.hmrc.gov.uk/customs/uk-internal-market/authorisations"   
  
                  
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: |
            Success - Authorised. A list of EORI Numbers provided with their authorised status as boolean 'true'. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorisations'
        '400':
          description: |
            Validation failure. The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              example: 
                {
                  "code": "INVALID_FORMAT",
                  "message": "FR123123123123 is not a suported EORI number" 
                }
        '401':
          description: "Authentication failure. Typically generated when authentication information is not provided, possibly by omitting a bearer token."
          content:
            application/json:
              example: 
                {
                  "code": "MISSING_CREDENTIALS",
                  "message": "Authentication information is not provided"
                }
        '403':
          description: |
            Forbidden. The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
          content:
            application/json:
              example: 
                {
                  "code": "FORBIDDEN",
                  "message": "You are not allowed to access this resource"
                }
        '405':
          description: |
            Method not allowed. A 405 usually means the client implemented a GET on a service that only allows POST, or vice-versa, or tried http: on a method that requires https.
          content:
            application/json:
              example: 
                {
                  "code": "METHOD_NOT_ALLOWED", 
                  "message": "This method is not supported"
                }
        '406':
          description: |
            Not acceptable. This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content that conforms to the criteria given by the user agent.
          content:
            application/json:
              example: 
                {
                  "code": "NOT_ACCEPTABLE",
                  "message": "Cannot produce an acceptable response"
                }
        '429':
          description: |
            Request in excess of rate limit. The user has sent too many requests in a given amount of time.
          content:
            application/json:
              example: 
                {
                  "code": "RATE_LIMIT_VIOLATION",
                  "message": "Request count from application in excess of rate limit"
                }
        '500':
          description: |
            Internal Server Error. The server has encountered a situation it does not know how to handle.
          content:
            application/json:
              example: 
                {
                  "code": "INTERNAL_SERVER_ERROR",
                  "message": "Unexpected internal issue"
                } 
      security:
        - applicationRestricted: []
components:
  securitySchemes:
    applicationRestricted:
      type: oauth2
      description: |
        HMRC supports OAuth 2.0 for authenticating application restricted API requests using an OAuth 2.0 Bearer Token in the AUTHORIZATION header.
        See https://developer.service.hmrc.gov.uk/api-documentation/docs/authorisation/application-restricted-endpoints for details.
      flows:
        clientCredentials:
          tokenUrl: https://api.service.hmrc.gov.uk/oauth/token
          scopes: { }
  schemas:
    Request:
      type: object
      properties:
        date:
          type: string
          example: 2024-02-31
        eoris:
          type: array
          items:
            type: string
            example: GB123123123333
    Authorisations:
      type: object
      properties:
        date:
          type: string
          example: 2024-02-31
        eoris:
          type: array
          items:
            type: object
            properties:
              eori:
                type: string
                example: GB123123123123
              authorised:
                type: boolean
                example: true
